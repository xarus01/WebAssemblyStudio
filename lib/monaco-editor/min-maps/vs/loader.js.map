{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","AMDLoader","global","Environment","opts","isWindows","isNode","isElectronRenderer","isWebWorker","detect","_isWindows","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEventType","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","LoaderAvailable","prototype","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","uri","decodeURI","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","nodeModules","nodeCachedDataWriteDelay","onNodeCachedData","data","warn","path","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","Object","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","actualScriptLoader","callbackMap","load","moduleManager","scriptSrc","errorback","scriptCallbacks","triggerCallback","triggerErrorback","BrowserScriptLoader","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getElementsByTagName","appendChild","WorkerScriptLoader","NodeScriptLoader","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_jsflags","argv","arg","_initNodeRequire","nodeCachedDataDir","getConfig","that","Module","_compile","content","replace","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","Script","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_processCachedData","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","normalizedScriptSrc","normalize","vmScriptSrc","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_loadAndEvalScript","NodeBeginEvaluatingScript","call","getGlobalAMDRequireFunc","getGlobalAMDDefineFunc","NodeEndEvaluatingScript","basedir","hash","createHash","update","digest","basename","join","cachedDataRejected","_runSoon","unlink","cachedDataProduced","undefined","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","BeginInvokeFactory","EndInvokeFactory","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","get","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_scriptLoader","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","Error","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","BeginLoadingScript","EndLoadingScriptOK","EndLoadingScriptError","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","DefineFunc","amd","jQuery","_requireFunc_config","RequireFunc","arguments","createGlobalAMDFuncs","_nodeRequire","what","NodeBeginNativeRequire","NodeEndNativeRequire","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = (function () {\n        function Environment(opts) {\n            this.isWindows = opts.isWindows;\n            this.isNode = opts.isNode;\n            this.isElectronRenderer = opts.isElectronRenderer;\n            this.isWebWorker = opts.isWebWorker;\n        }\n        Environment.detect = function () {\n            return new Environment({\n                isWindows: this._isWindows(),\n                isNode: (typeof module !== 'undefined' && !!module.exports),\n                isElectronRenderer: (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer'),\n                isWebWorker: (typeof AMDLoader.global.importScripts === 'function')\n            });\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEventType;\n    (function (LoaderEventType) {\n        LoaderEventType[LoaderEventType[\"LoaderAvailable\"] = 1] = \"LoaderAvailable\";\n        LoaderEventType[LoaderEventType[\"BeginLoadingScript\"] = 10] = \"BeginLoadingScript\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptOK\"] = 11] = \"EndLoadingScriptOK\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptError\"] = 12] = \"EndLoadingScriptError\";\n        LoaderEventType[LoaderEventType[\"BeginInvokeFactory\"] = 21] = \"BeginInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"EndInvokeFactory\"] = 22] = \"EndInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"NodeBeginEvaluatingScript\"] = 31] = \"NodeBeginEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeEndEvaluatingScript\"] = 32] = \"NodeEndEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeBeginNativeRequire\"] = 33] = \"NodeBeginNativeRequire\";\n        LoaderEventType[LoaderEventType[\"NodeEndNativeRequire\"] = 34] = \"NodeEndNativeRequire\";\n    })(LoaderEventType = AMDLoader.LoaderEventType || (AMDLoader.LoaderEventType = {}));\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(LoaderEventType.LoaderAvailable, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        return NullLoaderEventRecorder;\n    }());\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri);\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return /^===anonymous/.test(id);\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        return Utilities;\n    }());\n    Utilities.NEXT_ANONYMOUS_ID = 1;\n    Utilities.PERFORMANCE_NOW_PROBED = false;\n    Utilities.HAS_PERFORMANCE_NOW = false;\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (isWebWorker, options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                // Catch errors by default in web workers, do not catch errors by default in other contexts\n                options.catchError = isWebWorker;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedDataWriteDelay !== 'number' || options.nodeCachedDataWriteDelay < 0) {\n                options.nodeCachedDataWriteDelay = 1000 * 7;\n            }\n            if (typeof options.onNodeCachedData !== 'function') {\n                options.onNodeCachedData = function (err, data) {\n                    if (!err) {\n                        // ignore\n                    }\n                    else if (err.errorCode === 'cachedDataRejected') {\n                        console.warn('Rejected cached data from file: ' + err.path);\n                    }\n                    else if (err.errorCode === 'unlink' || err.errorCode === 'writeFile') {\n                        console.error('Problems writing cached data file: ' + err.path);\n                        console.error(err.detail);\n                    }\n                    else {\n                        console.error(err);\n                    }\n                };\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (isWebWorker, overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(isWebWorker, result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(this._env.isWebWorker, options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this._env.isNode && this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this._env.isNode && this.options.nodeMain) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(this._env.isWebWorker, options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(actualScriptLoader) {\n            this.actualScriptLoader = actualScriptLoader;\n            this.callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this.callbackMap.hasOwnProperty(scriptSrc)) {\n                this.callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this.callbackMap[scriptSrc] = [scriptCallbacks];\n            this.actualScriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n            // js-flags have an impact on cached data\n            this._jsflags = '';\n            for (var _i = 0, _a = process.argv; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (arg.indexOf('--js-flags=') === 0) {\n                    this._jsflags = arg;\n                    break;\n                }\n            }\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedDataDir = moduleManager.getConfig().getOptionsLiteral().nodeCachedDataDir;\n            if (!nodeCachedDataDir || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedDataDir, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = true;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, AMDLoader.global, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, cachedDataPath);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (_this._env.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedDataDir) {\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder);\n                        callback();\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedDataDir, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder);\n                            callback();\n                            _this._processCachedData(moduleManager, script, cachedDataPath_1);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder) {\n            // create script, run script\n            recorder.record(AMDLoader.LoaderEventType.NodeBeginEvaluatingScript, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), moduleManager.getGlobalAMDDefineFunc(), vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(AMDLoader.LoaderEventType.NodeEndEvaluatingScript, scriptSrc);\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(this._jsflags, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, cachedDataPath) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () { return _this._fs.unlink(cachedDataPath, function (err) {\n                    if (err) {\n                        moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                            errorCode: 'unlink',\n                            path: cachedDataPath,\n                            detail: err\n                        });\n                    }\n                }); }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData(undefined, {\n                    path: cachedDataPath,\n                    length: script.cachedData.length\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () { return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                    if (err) {\n                        moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                            errorCode: 'writeFile',\n                            path: cachedDataPath,\n                            detail: err\n                        });\n                    }\n                }); }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        return NodeScriptLoader;\n    }());\n    NodeScriptLoader._BOM = 0xFEFF;\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env.isWebWorker ?\n            new WorkerScriptLoader()\n            : env.isNode ?\n                new NodeScriptLoader(env)\n                : new BrowserScriptLoader());\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        return ModuleIdResolver;\n    }());\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(AMDLoader.LoaderEventType.BeginInvokeFactory, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(AMDLoader.LoaderEventType.EndInvokeFactory, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        return RegularDependency;\n    }());\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            if (this._env.isNode && strModuleId.indexOf('/') === -1) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(AMDLoader.LoaderEventType.BeginLoadingScript, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptOK, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptError, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var moduleManager = null;\n    var DefineFunc = null;\n    var RequireFunc = null;\n    function createGlobalAMDFuncs() {\n        var _defineFunc = function (id, dependencies, callback) {\n            if (typeof id !== 'string') {\n                callback = dependencies;\n                dependencies = id;\n                id = null;\n            }\n            if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n                callback = dependencies;\n                dependencies = null;\n            }\n            if (!dependencies) {\n                dependencies = ['require', 'exports', 'module'];\n            }\n            if (id) {\n                moduleManager.defineModule(id, dependencies, callback, null, null);\n            }\n            else {\n                moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n            }\n        };\n        DefineFunc = _defineFunc;\n        DefineFunc.amd = {\n            jQuery: true\n        };\n        var _requireFunc_config = function (params, shouldOverwrite) {\n            if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n            moduleManager.configure(params, shouldOverwrite);\n        };\n        var _requireFunc = function () {\n            if (arguments.length === 1) {\n                if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                    _requireFunc_config(arguments[0]);\n                    return;\n                }\n                if (typeof arguments[0] === 'string') {\n                    return moduleManager.synchronousRequire(arguments[0]);\n                }\n            }\n            if (arguments.length === 2 || arguments.length === 3) {\n                if (Array.isArray(arguments[0])) {\n                    moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                    return;\n                }\n            }\n            throw new Error('Unrecognized require call');\n        };\n        RequireFunc = _requireFunc;\n        RequireFunc.config = _requireFunc_config;\n        RequireFunc.getConfig = function () {\n            return moduleManager.getConfig().getOptionsLiteral();\n        };\n        RequireFunc.reset = function () {\n            moduleManager = moduleManager.reset();\n        };\n        RequireFunc.getBuildInfo = function () {\n            return moduleManager.getBuildInfo();\n        };\n        RequireFunc.getStats = function () {\n            return moduleManager.getLoaderEvents();\n        };\n    }\n    function init() {\n        createGlobalAMDFuncs();\n        var env = AMDLoader.Environment.detect();\n        var scriptLoader = AMDLoader.createScriptLoader(env);\n        moduleManager = new AMDLoader.ModuleManager(env, scriptLoader, DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        if (env.isNode) {\n            var _nodeRequire = (AMDLoader.global.require || require);\n            var nodeRequire = function (what) {\n                moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeBeginNativeRequire, what);\n                try {\n                    return _nodeRequire(what);\n                }\n                finally {\n                    moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeEndNativeRequire, what);\n                }\n            };\n            AMDLoader.global.nodeRequire = nodeRequire;\n            RequireFunc.nodeRequire = nodeRequire;\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            // These two defs are fore the local closure defined in node in the case that the loader is concatenated\n            define = function () {\n                DefineFunc.apply(null, arguments);\n            };\n            require = RequireFunc;\n        }\n        else {\n            // The global variable require can configure the loader\n            if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n                RequireFunc.config(AMDLoader.global.require);\n            }\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = define = DefineFunc;\n            }\n            else {\n                define = function () {\n                    DefineFunc.apply(null, arguments);\n                };\n            }\n            AMDLoader.global.require = RequireFunc;\n            AMDLoader.global.require.__$__nodeRequire = nodeRequire;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof doNotInitLoader === 'undefined' &&\n        (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd)) {\n        init();\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}